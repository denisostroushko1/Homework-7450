---
title: "Homework 3"
author: Denis Ostroushko
format: 
  pdf:
    toc: false
    number-sections: false
    colorlinks: true
editor: source
execute:
  echo: false
  warning: false
  message: false 
---

```{r}

#' Basic function for Fleming-Harrington family weighted log-rank tests
#'
#' Basic function to build the table for the calculation of the Fleming-Harrington family of weighted log-rank tests.
#'
#'
#'
#' @param survival Time to event or censoring.
#' @param delta Event indicator: 1 for observed cases, 0 for censored cases.
#' @param trt Treatment assignment indicator: 1 for treatment group, 0 for control group.
#' @param rho,gamma Parameters for Fleming-Harrington family with \eqn{W(t)=S^\rho(t^-)(1-S(t^-))^\gamma}.
#'
#'
#' @return Build a table for Fleming-Harrington log-rank test which ouputs \emph{ordered} \code{survival} as follow-up times, \code{Surv} as predictable survival functions \eqn{S(t^-)}, \code{Surv.exact} as exact survival functions \eqn{S(t)}, \code{delta} as event indicators, \code{trt} as treatment assignement (treated=1, control=0), \code{weight} as weight functon calcualted from the predictable survival functions \code{Surv}.
#'
#' In addition, the output also include \code{O1} as the observed events from the treatment arm, \code{E1} as the expected events from the treatment arm, \code{Cov} as the estimated variance without considering the weights.
#' @author Lili Wang
#'
FH.table <- function(survival, delta, trt, rho, gamma){
  ord <- order(survival)
  survival <- survival[ord]
  delta <- delta[ord]
  trt <- trt[ord]
  n <- length(delta)
  if(n != length(survival)) stop("Unequal lengths of survival and delta")
  #delete the last delta=1 observation to avoid the situation of S=0
  if(delta[n] == 1) {
    survival = survival[ - n]
    delta = delta[ - n]
    trt = trt[ - n]
    n = n - 1
  }
  # Note the Surv is prepared for the weight, which is predictable, corresponding to survKM_minus.
  out <- data.table(
    survival = survival,
    Surv = c(1, cumprod(1 - delta / (n:1))[ - n]),
    Surv.exact = cumprod(1 - delta / (n:1)), 
    delta = delta, 
    trt = trt
    )
  Y <- n:1
  P1 <- rev(cumsum(rev(trt))) / Y
  P0 <- 1 - P1
  out[, weight := Surv^rho * (1 - Surv)^gamma][,O1 := trt*delta][,E1 := P1 * delta][,Cov := P1 * P0 * delta]
  return(out)
}

#' Basic function for standard log-rank test
#'
#' Build the table for log-rank test calculation.
#'
#'
#'
#' @inheritParams FH.table
#'
#' @return Build a table for log-rank test which ouputs \emph{ordered} \code{survival} as follow-up times, \code{delta} as event indicators,\code{trt} as treatment assignement (treated=1, control=0), \code{Y} as the at-risk numbers, \code{P1} as the proportion of treated set, \code{P0} as the proportion of the control set.
#'
#' In addition, the output also include \code{O1} as the observed events from the treatment arm, \code{E1} as the expected events from the treatment arm, \code{Cov} as the estimated variance.
#' @seealso \code{\link{FH.test}}, \code{\link{I_t.2}}, \code{\link{WLR.test.cov}},\code{\link{WLR.test.cor}}
#'
#'
#' @author Lili Wang
#'
#'
logrank.table <- function(survival, delta, trt){
  ord <- order(survival)
  survival <- survival[ord]
  delta <- delta[ord]
  trt <- trt[ord]
  n <- length(delta)
  if(n != length(survival)) stop("Unequal lengths of survival and delta")

  #delete the last delta=1 observation to avoid the situation of S=0
  if(delta[n] == 1) {
    survival = survival[ - n]
    delta = delta[ - n]
    trt = trt[ - n]
    n = n - 1
  }
  Y <- n:1
  P1 <- rev(cumsum(rev(trt))) / Y
  P0 <- 1 - P1
  O1 <- trt * delta
  E1 <- P1 * delta
  Cov <- P1 * P0 * delta
  out = data.table(O1, E1, Cov, P1, P0, Y, survival, delta, trt)
  return(out)
}

#' Calculate the survival functions
#'
#' Calculate the survival function, either the predictable one \eqn{S(t^-)} using \code{survKM_minus} or \eqn{S(t)} using \code{survKM_exact}.
#'
#' @param v Time vector to give the corresponding survival functions.
#' @param survival Input follow-up times.
#' @param delta Input event indicators.
#'
#' @return \code{survKM_minus} returns the predictable one \eqn{S(t^-)}, and \code{survKM_exact} returns \eqn{S(t)}.
#'
#' @author Lili Wang
survKM_minus <- function(v, survival, delta){
  v = as.vector(v)
  ord <- order(survival)
  survival <- survival[ord]
  delta <- delta[ord]
  n = length(delta)
  if(delta[n] == 1) {
    survival = survival[ - n]
    delta = delta[ - n]
    n = n - 1
  }
  if(is.unsorted(survival)) {
    ord = order(survival)
    survival = survival[ord]
    delta = delta[ord]
    }
  if(n != length(survival)) stop("Unequal lengths of survival and delta")
  c(1, cumprod(1 - delta / (n:1)))[
    sapply(v, function(tt) which.min(survival < tt))
    ] # corresponding to t^-, that is to make it predictable
}
#' @rdname survKM_minus
survKM_exact <- function(v, survival, delta){
  v <- as.vector(v)
  ord <- order(survival)
  survival <- survival[ord]
  delta <- delta[ord]
  n <- length(delta)
  if(delta[n] == 1) {
    survival = survival[ - n]
    delta = delta[ - n]
    n = n - 1
  }
  if(is.unsorted(survival)) {
    ord = order(survival)
    survival = survival[ord]
    delta = delta[ord];}
  if(n != length(survival)) stop("Unequal lengths of survival and delta")
  cumprod(1 - delta / (n:1))[sapply(v, function(tt) which.min(survival < tt))]
}

#'
#' Fleming-Harrington weighted log-rank tests
#'
#' Calculating the Fleming-Harrington weighted log-rank tests
#'
#'
#'
#' @param survival Time to event or censoring.
#' @param delta Event indicators.
#' @param trt Treatment assignment indicator with 1 denoting the treated group, and 0 denoting the placebo group.
#' @param rho First power parameter for the Fleming-Harrington weight which weighs on the early departures: \eqn{S(t^-)^\rho(1-S(t^-))^\gamma}.
#' @param gamma Second power parameter for the Fleming-Harrington weight which weighs on the late departures: \eqn{S(t^-)^\rho(1-S(t^-))^\gamma}.
#' @return A list 3 different components
#'   \item{O1}{Observed number of weighted events (with a multiplication of corresponding weights) in the treatment arm.}
#'   \item{E1 }{Expected number of weighted events (with a multiplication of corresponding weights) in the treatment arm.}
#'   \item{Z}{Weighted log-rank test statistic.}
#'
#' @author Lili Wang
#' @seealso \code{\link{WLR.test}}
#' @examples
#' # Examples for FH.test and WLR.test
#' set.seed(12345)
#' data_temp<- nphsim(nsim=1,lambdaC=log(2)/6, lambdaE = c(log(2)/6,log(2)/6*0.7), ssC=250, intervals = c(2),ssE=250, gamma=500/14, R=14, eta=1e-5, fixEnrollTime = TRUE)$simd
#' data_final<-data.trim.d(100,data_temp)[[1]]
#' rho=1
#' gamma=0
#' # compare the 3 different ways below:
#' #library(survival)
#' sqrt(survdiff(Surv(survival,delta)~trt, data =data_final,rho=rho)$chisq)
#' FH.test(survival=data_final$survival,delta=data_final$delta,trt=data_final$trt,rho=rho,gamma=gamma)
#' WLR.test(survival=data_final$survival,delta=data_final$delta,trt=data_final$trt,w=function(...){survKM_minus(...)^rho*(1-survKM_minus(...))^gamma})
#'
FH.test <- function(survival, delta, trt, rho, gamma){
  FH_table <- FH.table(survival, delta, trt, rho, gamma)
  O1 <- sum(FH_table$weight * FH_table$O1)
  E1 <- sum(FH_table$weight * FH_table$E1)
  V <- sum(FH_table$weight^2 * FH_table$Cov)
  Z<-(O1 - E1) / sqrt(V)
  return(list(O1 = O1,E1 = E1,Z = Z))
}

#' Weighted log-rank tests with any input weight
#'
#' Weighted log-rank test for any input weight function.
#' @param survival Time to event or censoring.
#' @param delta Event indicator: 1 for observed cases, 0 for censored cases.
#' @param trt Treatment assignment indicator: 1 for treatment group, 0 for control
#' @param w Weight function, with default to be 1, which is similar to the use of input arbitray weight in \code{\link{WLR.test.cov}}. Please also refer to the examples as well.
#' @author Lili Wang
#' @seealso \code{\link{FH.test}}
#' @examples
#' # Examples for FH.test and WLR.test
#' set.seed(12345)
#' data_temp<- nphsim(nsim=1,lambdaC=log(2)/6, lambdaE = c(log(2)/6,log(2)/6*0.7), ssC=250, intervals = c(2),ssE=250, gamma=500/14, R=14, eta=1e-5, fixEnrollTime = TRUE)$simd
#' data_final<-data.trim.d(100,data_temp)[[1]]
#' rho=1
#' gamma=0
#' # compare the 3 different ways below:
#' #library(survival)
#' sqrt(survdiff(Surv(survival,delta)~trt, data =data_final,rho=rho)$chisq)
#' FH.test(survival=data_final$survival,delta=data_final$delta,trt=data_final$trt,rho=rho,gamma=gamma)
#' WLR.test(survival=data_final$survival,delta=data_final$delta,trt=data_final$trt,w=function(...){survKM_minus(...)^rho*(1-survKM_minus(...))^gamma})
#'
WLR.test <- function(survival, delta, trt, w = function(v,...){1}){
  WLR_table <- logrank.table(survival, delta, trt)
  wt_vec <- w(
    v = WLR_table$survival, 
    survival = WLR_table$survival, 
    delta = WLR_table$delta
    )
  O1 <- sum(wt_vec * WLR_table$O1)
  E1 <- sum(wt_vec * WLR_table$E1)
  V <- sum(wt_vec^2 * WLR_table$Cov)
  Z <- (O1 - E1) / sqrt(V)
  return(list(O1 = O1, E1 = E1, Z = Z))
}
```

```{r}

library(survival)
library(km.ci)
library(KMsurv)
library(tidyverse)
library(kableExtra)
library(survminer)
library(FHtest)
library(data.table)
library(survRM2)

```

# Problem 1

### (i)

@fig-p1 shows the two curves for two groups. It appears that the two curves are somewhat different, but there is 
a lot of overlap in the confidence bands for two groups. 

```{r}
#| fig-cap: "Time to tongue cancer between two types of tumor groups" 
#| label: fig-p1


data("tongue")
# type = 1 => Aneuploid Tumor,
# type = 2 => Diploid Tumor

fit <- survfit(Surv(time, delta) ~ type, data = tongue)

ggsurvplot(fit, data = tongue, 
           risk.table = F, 
           pval = TRUE,
           palette = c("#E41A1C", "#377EB8"), 
           title = "Survival Estimates by Group",
           conf.int = TRUE)

survdiff(Surv(time, delta) ~ type, data = tongue, rho = 0)

```

* Null hypothesis: There is no difference in survival between the two groups being compared.

* Alternative hypothesis: There is a difference in survival between the two groups being compared.

* Test statistic: 2.8 

* Use $\chi ^2_1$ random variable and its 95th percentile to find critical value. Critical value: `r round(qchisq(p = 0.95, df = 1), 3)`

* Conclusion: Survival rates for Aneuploid tumor type appear to be higher than the Diploid group. P-value suggests
that there may be a true difference between the two groups, however, the difference is not statistically significant at the 95% significance level. We do not reject the null hypothesis due to a lack of statistical evidence. 

### (ii)

```{r}

FHtestrcp(Surv(time, delta) ~ type, data = tongue, type = "two-sided", alpha = 0.05)

```

### (iii)

```{r}


fit_1 <- survfit(Surv(time, delta) ~1 ,data = tongue %>% filter(type == 1))

s.km.fit = summary(fit_1, rmean=56)

fit_2 <- survfit(Surv(time, delta) ~1 ,data = tongue %>% filter(type == 2))

s.km.fit2 = summary(fit_2, rmean=56)


test_stat <- (s.km.fit2$table["rmean"] - s.km.fit$table["rmean"] - 0)/
  sqrt(s.km.fit$table["se(rmean)"] ^ 2 * length(which(tongue$type == 1)) / nrow(tongue)
       + s.km.fit2$table["se(rmean)"] ^ 2* length(which(tongue$type == 2)) / nrow(tongue))

qt(0.975, df = nrow(tongue) - 2)
```

# Problem 2

### (i)

```{r}
data("larynx")

survdiff(Surv(time, delta) ~ stage, data = larynx, rho = 0)

```

# Problem 3

### (i)

```{r}

larynx$strat <- 
  with(larynx, 
       case_when(
         diagyr < 75 ~ "Prior to 1975", 
         TRUE ~ "1975 and Later"
       ))

survdiff(Surv(time, delta) ~ stage + strata(strat), data = larynx, rho = 0)

```

### (ii)

```{r}

survdiff(Surv(time, delta) ~ stage, data = larynx %>% filter(strat == "Prior to 1975"), rho = 0)
survdiff(Surv(time, delta) ~ stage, data = larynx %>% filter(strat != "Prior to 1975"), rho = 0)

```

# Problem 4

### (i)

```{r}
data("kidtran")

survdiff(Surv(time, delta) ~ race + gender, data = kidtran)

```

### (ii)

```{r}
data("kidtran")

survdiff(Surv(time, delta) ~ race, data = kidtran %>% filter(gender == 1))

survdiff(Surv(time, delta) ~ race, data = kidtran %>% filter(gender == 2))

```

### (iii)

```{r}

survdiff(Surv(time, delta) ~ race + strata(gender), data = kidtran)

```

# Problem 5

### (i)

```{r}
data("bmt")

survdiff(Surv(t1, d1) ~ group, data = bmt)

```

### (ii)

```{r}
survdiff(Surv(t1, d1) ~ group + strata(z9), data = bmt)
```
### (iii)

```{r}

library(emmeans)

pairs(survdiff(Surv(t1, d1) ~ group + strata(z9), data = bmt))

pairwise_survdiff(Surv(t1, d1) ~ group, data = bmt, p.adjust.method = "bonferroni")
              
    
```